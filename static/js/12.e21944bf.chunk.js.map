{"version":3,"sources":["projects_templates/csvparser/modal.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Modal","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","video_react__WEBPACK_IMPORTED_MODULE_1__","props","a","createElement","className","playsInline","poster","src","onClick","closeModal"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAA,EAAA,IAIe,SAASI,EAAMK,GAC5B,OACEH,EAAAI,EAAAC,cAAA,OAAKC,UAAU,kBACbN,EAAAI,EAAAC,cAAA,MAAIC,UAAU,yBAAd,mBACAN,EAAAI,EAAAC,cAAA,KAAGC,UAAU,+BAAb,6KAGgCN,EAAAI,EAAAC,cAAA,WAHhC,kBAIiBL,EAAAI,EAAAC,cAAA,WAJjB,kEAKgBL,EAAAI,EAAAC,cAAA,iDALhB,KAK6DL,EAAAI,EAAAC,cAAA,WAL7D,sPAS+BL,EAAAI,EAAAC,cAAA,WAT/B,iBAUgBL,EAAAI,EAAAC,cAAA,WAVhB,qQAeAL,EAAAI,EAAAC,cAAA,OAAKC,UAAU,yBACbN,EAAAI,EAAAC,cAAA,SACEL,EAAAI,EAAAC,cAAA,QAAMC,UAAU,eAAhB,UACAN,EAAAI,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,sFAMJN,EAAAI,EAAAC,cAAA,OAAKC,UAAU,yBACbN,EAAAI,EAAAC,cAACH,EAAA,OAAD,CACEK,aAAW,EACXC,OAAO,sCACPC,IAAI,2CAGRT,EAAAI,EAAAC,cAAA,OAAKC,UAAU,2BACbN,EAAAI,EAAAC,cAAA,UACEK,QAASP,EAAMQ,WACfL,UAAU,6CAFZ","file":"static/js/12.e21944bf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Player } from \"video-react\";\nimport \"video-react/dist/video-react.css\";\n\nexport default function Modal(props) {\n  return (\n    <div className=\"project-popup \">\n      <h1 className=\"project-popup__title \">CSV parsing app</h1>\n      <p className=\"project-popup__description \">\n        There are situations when you have large CSV files with millions of\n        records and you need a special tool to search and filter them. The tool\n        consists of two core modules: <br />\n        1) CSV parser. <br /> The parser can be start in the terminal via the\n        next command: <i>npm start someFile.csv someDirectory</i>. <br />\n        When user executes this command, the script recursively searches for all\n        CSV files in all directories and subdirectories. With usage of streams\n        mechanism, the script parses every CSV file that was found, and saves\n        parsed data in the database. <br />\n        2) Table app. <br /> This part is responsible for displaying and\n        filtering the parsed data. It is developed with React.js and Material\n        UI. The result database can contain millions of records, so AJAX lazy\n        loading was carried out. Also user can download a new filtered CSV file.\n      </p>\n      <div className=\"project-popup__about \">\n        <p>\n          <span className=\"span-title \">Stack:</span>\n          <span className=\"span-description \">\n            React.js, Material UI, responsive web, Node.js + express, PostgreSQL\n            + Sequelize\n          </span>\n        </p>\n      </div>\n      <div className=\"project-popup__videos\">\n        <Player\n          playsInline\n          poster=\"./img/projects/csvparser/poster.png\"\n          src=\"./img/projects/csvparser/overview.mp4\"\n        />\n      </div>\n      <div className=\"project-popup__buttons \">\n        <button\n          onClick={props.closeModal}\n          className=\"project-link project-link--gray backToCV \"\n        >\n          Back to cv\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}